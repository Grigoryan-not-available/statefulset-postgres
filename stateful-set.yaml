apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql-sts
spec:
  selector:
    matchLabels:
      app: postgresql-server # has to match .spec.template.metadata.labels
  serviceName: "postgresql-server"
  replicas: 3
  template:
    metadata:
      labels:
        app: postgresql-server # has to match .spec.selector.matchLabels
    spec:
      terminationGracePeriodSeconds: 10
      securityContext:
        runAsUser: 70 # 70 - for alpine, 999 - for basic image
        fsGroup: 70
      containers:
      - name: postgresql-db
        image: postgres:14.5-alpine
        command: ["bash"]
        args: ["/utils/pg-init.sh"]
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgresql-secrets
              key: POSTGRES_PASSWORD
        - name: POSTGRES_REPLICATION_USERNAME
          valueFrom:
            secretKeyRef:
              name: postgresql-replication-user
              key: POSTGRES_REPLICATION_USERNAME
        - name: POSTGRES_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgresql-replication-user
              key: POSTGRES_REPLICATION_PASSWORD
        - name: PGPASSWORD # for pg_basebackup. It will authenticate as the replication user "replicator"
          valueFrom:
            secretKeyRef:
              name: postgresql-replication-user
              key: POSTGRES_REPLICATION_PASSWORD

        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        ports:
        - containerPort: 5432
          name: postgresql-port
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data
        - name: configs
          mountPath: /etc/postgresql
        - name: podinfo
          mountPath: /etc/podinfo
        - name: utils
          mountPath: /utils
      volumes:
      - name: configs
        configMap:
          name: postgresql-configs
      - name: utils
        configMap:
          name: postgresql-utils
      - name: podinfo
        downwardAPI:
          items:
            - path: "labels"
              fieldRef:
                fieldPath: metadata.labels
            - path: "annotations"
              fieldRef:
                fieldPath: metadata.annotations
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
